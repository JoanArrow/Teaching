
###
#Generating a Qrandom number between 0 and n-1 in Qiskit
###

def Qrand(n):

    import numpy as np
    from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, transpile
    from qiskit.providers.aer import QasmSimulator
    from qiskit.visualization import plot_histogram


    # Use Aer's qasm_simulator
    simulator = QasmSimulator()

    # Create a Quantum Circuit acting on the q register
    qr = QuantumRegister(n, 'q')
    cr = ClassicalRegister(n, 'c')
    circuit = QuantumCircuit(qr, cr)


# Add a H gate on all qubits
    for i in range(0,n):
            circuit.h(i)


# Map the quantum measurement to the classical bits
    circuit.measure(qr, cr)

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
    compiled_circuit = transpile(circuit, simulator)

# Execute the circuit on the qasm simulator
    job = simulator.run(compiled_circuit, shots=1)

# Grab results from the job
    result = job.result()


# Returns counts
    counts = result.get_counts(compiled_circuit)
    print(counts)
    
# Draw the circuit
#circuit.draw()
